import inspect

class _RandomVariableDatabase:
	"""
	Database of randomness generated by a probabilistic program
	Modified/updated during inference over program traces
	"""

	class Record:
		"""
		Value item stored in the database
		"""

		def __init__(self, erp, params, val, logprob):
			self.erp = erp
			self.params = params
			self.val = val
			self.logprob = logprob
			self.active = True

	def __init__(self):
		self._vars = {}

	def beforeTrace(self):
		"""
		Run before executing a trace.
		Marks all random values as 'inactive'; only
			those reached by the trace execution will be
			marked as 'active'
		"""
		for record in self.vars._values:
			record.active = False

	def afterTrace(self):
		"""
		Run after executing a trace.
		Cleans up any random values that are no longer reachable
			in the current trace.
		"""
		self._vars = {name : record for name, record in self._vars if record.active = True}

	def currentName(self, numFrameSkip):
		"""
		Return the current name, as determined by the execution
			trace of the current program.
		Skips the top 'numFrameSkip' stack frames that precede this
			function's stack frame (numFrameSkip+1 frames total)
		"""
		pass	# TODO: Implement this!!!

	def lookup(self, name, erp, params):
		"""
		Looks up the value of a random variable.
		If this random variable does not exist, returns None.
		"""
		record = self._vars.get(name)
		if record == None or record.erp != erp:
			return None
		else:
			if record.params != params:
				record.params = params
				record.logprob = erp._logprob(params)
			return record.val

	def insert(self, name, erp, params, val):
		"""
		Insert a new record
		"""
		self._vars[name] = Record(erp, params, val, erp._logprob(params))

"""
Global singleton instance
"""
_rvdb = _RandomVariableDatabase()