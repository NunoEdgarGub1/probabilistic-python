import inspect
import copy

class _RVDatabaseRecord:
	"""
	Value item stored in the database
	"""

	def __init__(self, erp, params, val, logprob):
		self.erp = erp
		self.params = params
		self.val = val
		self.logprob = logprob
		self.active = True

	def __deepcopy__(self, memo):
		return _RVDatabaseRecord(self.erp, self.params[:], self.val, self.logprob, self.active)

class _RandomVariableDatabase:
	"""
	Database of randomness generated by a probabilistic program
	Modified/updated during inference over program traces
	"""

	def __init__(self):
		self._vars = {}
		self._logprob = 0

	def __deepcopy__(self, memo):
		newdb = _RandomVariableDatabase()
		newdb._logprob = self._logprob
		newdb._vars = copy.deepcopy(self._vars, memo)

	def traceUpdate(self, computation):
		"""
		Run computation and update this database accordingly
		"""

		self._logprob = 0.0

		# First, mark all random values as 'inactive'; only
		# those reeached by the computation will become 'active'
		for record in self.vars._values:
			record.active = False

		computation()

		# Clean up any random values that are no longer reachable
		self._vars = {name:record for name,record in self._vars if record.active == True}

	def currentName(self, numFrameSkip):
		"""
		Return the current name, as determined by the execution
			trace of the current program.
		Skips the top 'numFrameSkip' stack frames that precede this
			function's stack frame (numFrameSkip+1 frames total)
		"""
		s = inspect.stack()[(numFrameSkip+1):]
		s.reverse()
		name = ""
		for tup in s:
			f = tup[0]
			name += "{0}:{1}|".format(id(f.f_code), f.f_lineno)
		return name

	def lookup(self, name, erp, params):
		"""
		Looks up the value of a random variable.
		If this random variable does not exist, returns None.
		"""
		record = self._vars.get(name)
		if record == None or record.erp != erp:
			return None
		else:
			if record.params != params:
				record.params = params
				record.logprob = erp._logprob(params)
			self._logprob += record.logprob
			return record.val

	def insert(self, name, erp, params, val):
		"""
		Insert a new random variable
		"""
		ll = erp._logprob(val, params)
		self._vars[name] = _RVDatabaseRecord(erp, params, val, ll)
		self._logprob += ll

	def addFactor(self, num):
		"""
		Add a new factor into the log likelihood of the current trace
		"""
		self._logprob += num

"""
Global singleton instance
"""
_rvdb = _RandomVariableDatabase()